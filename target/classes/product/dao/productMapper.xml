<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="productSQL">
	<!-- 총글수 -->
	<select id="getTotalA" parameterType="java.util.Map" resultType="Integer">
  		select count(*) from ${tableName} 
 	</select>
 	<!-- 검색 : 총글수 -->
 	<select id="getTotalSearchA" parameterType="java.util.Map" resultType="Integer">
 		select count(*) from ${tableName}
 		inner join ${joinName}
		on ${tableName}.product_name_no = ${joinName}.product_name_no			 
 		where ${searchTable}.${searchOption} like '%'||#{keyword}||'%'
 	</select> 	
 	
	<!-- 재고 리스트 가져오기 -->
	<select id="inventoryList" parameterType="java.util.Map" resultType="product">
			select * from 
			(select rownum rn, tt.* from 
			(select p.*,pn.product_name_instockdate from product p,product_name pn 
			where p.product_name_no=pn.product_name_no 
			order by p.product_name_no desc)
			 tt) 
			where (rn between #{startNum} and #{endNum}) 
	</select>

 	<!--검색 : 재고 리스트-->
 	<select id="inventorySearch" parameterType="java.util.Map" resultType="product">
		 		select * from 
				(select rownum rn, tt.* from 
				(select ${tableName}.*,${joinName}.product_name_instockdate from ${tableName},${joinName}
				where ${tableName}.product_name_no=${joinName}.product_name_no 
				and ${searchTable}.${searchOption} like '%'||#{keyword}||'%'
				order by ${tableName}.product_name_no desc) tt) 
				where (rn between #{startNum} and #{endNum})
 	</select>
 
 	<!-- 재고 반영용 상품 정보 가져오기 -->
 	<select id="getProductInfo" parameterType="String" resultType="product">
 		select * from product where productid=#{productID}
 	</select>
  	<!-- 재고 및 단가 반영 -->
 	<update id="doModify" parameterType="java.util.Map">
 	begin
 		update product set stock=#{stock},unitcost=#{unitcost} where productid=#{productID};
 		update product_name set product_name_instockdate=sysdate where product_name_no=#{product_name_no};
 	end;	
 	</update>	
 	<!-- 상품 리스트 가져오기 -->
	<select id="productList" parameterType="java.util.Map" resultType="product">
		 		select * from 
				(select rownum rn, tt.* from 
				(select * from product_name
				left join product
				on product.product_name_no = product_name.product_name_no
                inner join product_category
                on product_name.product_category_no=product_category.product_category				
				order by product_name.product_name_no desc) tt) 
				where (rn between #{startNum} and #{endNum})
	</select>

 	<!--검색 : 상품 리스트-->
 	<select id="productSearch" parameterType="java.util.Map" resultType="product">
		 		select * from 
				(select rownum rn, tt.* from 
				(select * from product_name
				left join product
				on product.product_name_no = product_name.product_name_no
                inner join product_category
                on product_name.product_category_no=product_category.product_category				
				where ${searchTable}.${searchOption} like '%'||#{keyword}||'%'
				order by product.product_name_no desc) tt) 
				where (rn between #{startNum} and #{endNum})
 	</select>	
 	<select id="getProduct_NameInfo" parameterType="String" resultType="product">
 		select * from product_name
 		left join product
 		on product.product_name_no = product_name.product_name_no
 		inner join product_category
 		on product_name.product_category_no=product_category.product_category
 		where product_name.product_name_no=#{product_name_no} 		
 	</select>

	<!-- 등재 상품 목록:전부 가져오기(product_name)-->
	<select id="getProductList" resultType="product">
		select * from product_name 
		left join product
 		on product.product_name_no = product_name.product_name_no
 		inner join product_category
 		on product_name.product_category_no=product_category.product_category 			
		where product_onstore='YES'
		order by product_name.product_name_instockdate desc 
	</select>
	<!-- 사용자 총글수(ALL) -->
	<select id="getTotalItemA" parameterType="java.util.Map" resultType="Integer">
  		select count(*) from product_name
 		left join product
 		on product.product_name_no = product_name.product_name_no
 		inner join product_category
 		on product_name.product_category_no=product_category.product_category 	 		
 	</select>
	<!-- 사용자 총글수(Category) --> 	
	<select id="getSelectedItemA" parameterType="java.util.Map" resultType="Integer">
  		select count(*) from product_name
  		left join product
 		on product.product_name_no = product_name.product_name_no
 		inner join product_category
 		on product_name.product_category_no=product_category.product_category 	
  		where product_category_no=#{product_category_no} and product_onstore='YES'
 	</select> 	
 	<select id="getAllList" parameterType="java.util.Map" resultType="product">
		 		select * from 
				(select rownum rn, tt.* from 
				(select * from product_name left join product
				 on product.product_name_no = product_name.product_name_no
                 inner join product_category
                on product_name.product_category_no=product_category.product_category				
				order by #{order})tt) 
				where (rn between #{startNum} and #{endNum}) and product_onstore='YES' 	
 	</select>
  	<select id="getSelectedList" parameterType="java.util.Map" resultType="product">
 		 		select * from 
				(select rownum rn, tt.* from 
				(select * from product_name 
				left join product
				on product.product_name_no = product_name.product_name_no
                inner join product_category
                on product_name.product_category_no=product_category.product_category				
				order by #{order}) tt) 
				where (rn between #{startNum} and #{endNum}) and product_onstore='YES' 
				and product_category_no=#{product_category_no} 	
 	</select>
 	<!-- 임의의 상품번호 수령 -->	
 	<select id="product_getSeq" resultType="Integer">
 		select product_seq.nextVal from dual
 	</select>
 	<!-- 상품 업로드 -->
 	<insert id="product_nameUpload" parameterType="product">
 	 insert into product_name values(#{product_name_no},
 	 								#{product_category_no},
 	 								#{product_name_title},
 	 								#{product_name_detail},
 	 								#{product_name_price},
 	 								#{product_name_instockdate},
 	 								#{product_name_image},
 	 								0,
 	 								0,
 	 								0,
 	 								#{product_onstore})
 	</insert>
  	<insert id="productUpload" parameterType="product">
 	 insert into product values(#{productID},
 	 							#{unitcost},
 	 							0,
 	 							#{promotioncode},
 	 							#{productName},
 	 							#{product_name_no})
 	</insert>
 	<!-- 상품 수정 -->	
 	<update id="product_nameModify" parameterType="product">
 	 update product_name set product_category_no=#{product_category_no},
 	 						 product_name_title=#{product_name_title},
 	 						 product_name_detail=#{product_name_detail},
 	 						 product_name_price=#{product_name_price},
 	 						 product_name_instockdate=#{product_name_instockdate},
 	 						 product_name_image=#{product_name_image},
 	 						 product_onstore=#{product_onstore}
 	 	where product_name_no=#{product_name_no}
 	</update>
   	<update id="productModify" parameterType="product">
 	 update product set unitcost=#{unitcost},
 	 					promotioncode=#{promotioncode},
 	 					productName=#{productName}
 	 		where product_name_no=#{product_name_no}
 	</update>	 	
   	<!-- 상품 삭제-->	
 	<delete id="productDelete" parameterType="String">
		delete product_name where product_name_no = #{product_name_no}
	</delete>	
	<delete id="inventoryDelete" parameterType="String">
		delete product where product_name_no = #{product_name_no}		
	</delete>	
</mapper>















